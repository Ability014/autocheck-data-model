{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.11", "generated_at": "2024-08-24T21:16:56.615638Z", "invocation_id": "c2a6622f-00f6-47e0-a239-1c58ec83aca8", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.024106Z", "completed_at": "2024-08-24T21:16:54.056931Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.064061Z", "completed_at": "2024-08-24T21:16:54.064061Z"}], "thread_id": "Thread-2", "execution_time": 0.08829951286315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.stg_borrowers", "compiled": true, "compiled_code": "SELECT \n    borrower_id,\n    state,\n    city,\n    zip_code,\n    borrower_credit_score\nFROM AUTOCHECK.RAW.borrower_data", "relation_name": "AUTOCHECK.RAW.stg_borrowers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.084840Z", "completed_at": "2024-08-24T21:16:54.100849Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.106909Z", "completed_at": "2024-08-24T21:16:54.106909Z"}], "thread_id": "Thread-2", "execution_time": 0.03393673896789551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.stg_loan_repayments", "compiled": true, "compiled_code": "SELECT \n    loan_id,\n    payment_id,\n    try_cast(date_paid as date) as date_paid,\n    amount_paid\nFROM AUTOCHECK.RAW.repayment_data", "relation_name": "AUTOCHECK.RAW.stg_loan_repayments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.123243Z", "completed_at": "2024-08-24T21:16:54.141867Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.147712Z", "completed_at": "2024-08-24T21:16:54.147712Z"}], "thread_id": "Thread-2", "execution_time": 0.03426051139831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.stg_loan_schedule", "compiled": true, "compiled_code": "SELECT \n    loan_id,\n    schedule_id,\n    try_cast(expected_payment_date as date) as expected_payment_date,\n    expected_payment_amount\nFROM AUTOCHECK.RAW.schedule_data", "relation_name": "AUTOCHECK.RAW.stg_loan_schedule"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.168621Z", "completed_at": "2024-08-24T21:16:54.185782Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.190480Z", "completed_at": "2024-08-24T21:16:54.190480Z"}], "thread_id": "Thread-2", "execution_time": 0.03222227096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.stg_loans", "compiled": true, "compiled_code": "SELECT \n    borrower_id,\n    loan_id,\n    try_cast(date_of_release as date) as date_of_release,\n    term,\n    interestrate as interest_rate,\n    loanamount as loan_amount,\n    downpayment as down_payment,\n    payment_frequency,\n    try_cast(maturity_date as date) as maturity_date\nFROM AUTOCHECK.RAW.loan_data", "relation_name": "AUTOCHECK.RAW.stg_loans"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.216729Z", "completed_at": "2024-08-24T21:16:54.239309Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.249324Z", "completed_at": "2024-08-24T21:16:54.249324Z"}], "thread_id": "Thread-2", "execution_time": 0.046903133392333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.int_borrower_repayments", "compiled": true, "compiled_code": "WITH indexed_schedules as (\n    SELECT\n        *,\n        SUM(expected_payment_amount) OVER(PARTITION BY loan_id ORDER BY expected_payment_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as accumulated_payment_schedule,\n        ROW_NUMBER() OVER (PARTITION BY loan_id ORDER BY expected_payment_date) as row_id\n    FROM AUTOCHECK.RAW.stg_loan_schedule\n),\nindexed_repayments as (\n    SELECT\n        *,\n        SUM(amount_paid) OVER(PARTITION BY loan_id ORDER BY date_paid ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as accumulated_amount_repaid,\n        ROW_NUMBER() OVER (PARTITION BY loan_id ORDER BY date_paid) as row_id\n    FROM AUTOCHECK.RAW.stg_loan_repayments\n)\nSELECT\n    s.*,\n    payment_id,\n    date_paid,\n    amount_paid,\n    DATEDIFF(day, expected_payment_date, date_paid) as par_days,\n    accumulated_payment_schedule - accumulated_amount_repaid as par_amount\nFROM indexed_schedules as s\nLEFT JOIN indexed_repayments as l \nON s.loan_id = l.loan_id AND s.row_id = l.row_id", "relation_name": "AUTOCHECK.RAW.int_borrower_repayments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.274465Z", "completed_at": "2024-08-24T21:16:54.292972Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.301687Z", "completed_at": "2024-08-24T21:16:54.301687Z"}], "thread_id": "Thread-2", "execution_time": 0.04411482810974121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.int_borrower_loans", "compiled": true, "compiled_code": "SELECT\n    b.*,\n    loan_id,\n    date_of_release,\n    term,\n    interest_rate,\n    loan_amount,\n    down_payment,\n    payment_frequency,\n    maturity_date\nFROM AUTOCHECK.RAW.stg_borrowers as b \nLEFT JOIN AUTOCHECK.RAW.stg_loans as l \non b.borrower_id = l.borrower_id", "relation_name": "AUTOCHECK.RAW.int_borrower_loans"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.322193Z", "completed_at": "2024-08-24T21:16:54.352346Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.357394Z", "completed_at": "2024-08-24T21:16:54.357394Z"}], "thread_id": "Thread-2", "execution_time": 0.04733753204345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.fct_repayments", "compiled": true, "compiled_code": "SELECT\n    md5(cast(coalesce(cast(br.schedule_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(br.payment_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as schedule_payments_key,\n    md5(cast(coalesce(cast(loan_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as loan_key,\n    TRY_CAST(CONCAT(LEFT(date_paid, 4), SUBSTR(date_paid, 6, 2), SUBSTR(date_paid, 9, 2)) As INTEGER) As date_key,\n    TRY_CAST(CONCAT(LEFT(date_paid, 4), SUBSTR(date_paid, 6, 2)) As INTEGER) As month_key,\n    br.*\nfrom AUTOCHECK.RAW.int_borrower_repayments as br", "relation_name": "AUTOCHECK.RAW.fct_repayments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.377118Z", "completed_at": "2024-08-24T21:16:54.407355Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.412576Z", "completed_at": "2024-08-24T21:16:54.412576Z"}], "thread_id": "Thread-2", "execution_time": 0.04656791687011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.int_missed_payments", "compiled": true, "compiled_code": "SELECT \n    loan_id,\n    payment_id,\n    date_paid,\n    amount_paid\nFROM AUTOCHECK.RAW.int_borrower_repayments\nWHERE par_days > 0", "relation_name": "AUTOCHECK.RAW.int_missed_payments"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.433164Z", "completed_at": "2024-08-24T21:16:54.463065Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.472546Z", "completed_at": "2024-08-24T21:16:54.472546Z"}], "thread_id": "Thread-2", "execution_time": 0.05350017547607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.dim_loans", "compiled": true, "compiled_code": "SELECT \n    md5(cast(coalesce(cast(borrower_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(loan_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as borrower_loan_key,\n    md5(cast(coalesce(cast(loan_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as loan_key,\n    *\nFROM AUTOCHECK.RAW.int_borrower_loans", "relation_name": "AUTOCHECK.RAW.dim_loans"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.493294Z", "completed_at": "2024-08-24T21:16:54.544764Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.551913Z", "completed_at": "2024-08-24T21:16:54.551913Z"}], "thread_id": "Thread-2", "execution_time": 0.0718231201171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.not_null_fct_repayments_schedule_payments_key.60d799714f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect schedule_payments_key\nfrom AUTOCHECK.RAW.fct_repayments\nwhere schedule_payments_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.573264Z", "completed_at": "2024-08-24T21:16:54.610066Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.617093Z", "completed_at": "2024-08-24T21:16:54.617093Z"}], "thread_id": "Thread-2", "execution_time": 0.056162357330322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.unique_fct_repayments_schedule_payments_key.a7b3b4290f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    schedule_payments_key as unique_field,\n    count(*) as n_records\n\nfrom AUTOCHECK.RAW.fct_repayments\nwhere schedule_payments_key is not null\ngroup by schedule_payments_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.634339Z", "completed_at": "2024-08-24T21:16:54.651166Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.655257Z", "completed_at": "2024-08-24T21:16:54.655257Z"}], "thread_id": "Thread-2", "execution_time": 0.03022027015686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.not_null_dim_loans_loan_key.dc2e1daa8c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect loan_key\nfrom AUTOCHECK.RAW.dim_loans\nwhere loan_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.670632Z", "completed_at": "2024-08-24T21:16:54.689307Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.694313Z", "completed_at": "2024-08-24T21:16:54.694313Z"}], "thread_id": "Thread-2", "execution_time": 0.03243756294250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.relationships_fct_repayments_loan_key__loan_key__ref_dim_loans_.6ef41ed3a0", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select loan_key as from_field\n    from AUTOCHECK.RAW.fct_repayments\n    where loan_key is not null\n),\n\nparent as (\n    select loan_key as to_field\n    from AUTOCHECK.RAW.dim_loans\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:54.708220Z", "completed_at": "2024-08-24T21:16:54.723298Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:54.729460Z", "completed_at": "2024-08-24T21:16:54.729460Z"}], "thread_id": "Thread-2", "execution_time": 0.0313720703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.unique_dim_loans_loan_key.e700ab298a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    loan_key as unique_field,\n    count(*) as n_records\n\nfrom AUTOCHECK.RAW.dim_loans\nwhere loan_key is not null\ngroup by loan_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:53.995963Z", "completed_at": "2024-08-24T21:16:55.943900Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:55.948738Z", "completed_at": "2024-08-24T21:16:55.948738Z"}], "thread_id": "Thread-1", "execution_time": 2.439669609069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.dates", "compiled": true, "compiled_code": "\n\n\n    \nwith base_dates as (\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1825\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        (row_number() over (order by 1) - 1),\n        cast('2021-01-01' as timestamp)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-12-31' as timestamp)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast(\n\n    dateadd(\n        year,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_year_date_day,\n        cast(\n\n    dateadd(\n        day,\n        -364,\n        d.date_day\n        )\n\n as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_date_day,\n    cast(\n\n    dateadd(\n        day,\n        1,\n        d.date_day\n        )\n\n as date) as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end as day_of_week,\n    date_part('dayofweekiso', d.date_day) as day_of_week_iso,\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname(d.date_day)\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end as day_of_week_name,\n    dayname(d.date_day) as day_of_week_name_short,\n    date_part('day', d.date_day) as day_of_month,\n    date_part('dayofyear', d.date_day) as day_of_year,\n\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date) as week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date)\n        )\n\n as date) as week_end_date,\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date) as prior_year_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date)\n        )\n\n as date) as prior_year_week_end_date,\n    cast(date_part('week', d.date_day) as integer) as week_of_year,\n\n    cast(date_trunc('week', d.date_day) as date) as iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.date_day) as date)\n        )\n\n as date) as iso_week_end_date,\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) as prior_year_iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.prior_year_over_year_date_day) as date)\n        )\n\n as date) as prior_year_iso_week_end_date,\n    cast(date_part('weekiso', d.date_day) as integer) as iso_week_of_year,\n\n    cast(date_part('week', d.prior_year_over_year_date_day) as integer) as prior_year_week_of_year,\n    cast(date_part('weekiso', d.prior_year_over_year_date_day) as integer) as prior_year_iso_week_of_year,\n\n    cast(date_part('month', d.date_day) as integer) as month_of_year,\n    to_char(d.date_day, 'MMMM')  as month_name,\n    to_char(d.date_day, 'MON')  as month_name_short,\n\n    cast(date_trunc('month', d.date_day) as date) as month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as month_end_date,\n\n    cast(date_trunc('month', d.prior_year_date_day) as date) as prior_year_month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.prior_year_date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as prior_year_month_end_date,\n\n    cast(date_part('quarter', d.date_day) as integer) as quarter_of_year,\n    cast(date_trunc('quarter', d.date_day) as date) as quarter_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        quarter,\n        1,\n        date_trunc('quarter', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as quarter_end_date,\n\n    cast(date_part('year', d.date_day) as integer) as year_number,\n    cast(date_trunc('year', d.date_day) as date) as year_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n\n", "relation_name": "AUTOCHECK.RAW.dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:56.435709Z", "completed_at": "2024-08-24T21:16:56.448979Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:56.455780Z", "completed_at": "2024-08-24T21:16:56.455780Z"}], "thread_id": "Thread-2", "execution_time": 0.03420710563659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_autocheck.dim_date", "compiled": true, "compiled_code": "SELECT\nTRY_CAST(CONCAT(LEFT(DATE_DAY, 4), SUBSTR(DATE_DAY, 6, 2), SUBSTR(DATE_DAY, 9, 2)) AS INTEGER) As date_key,\nTRY_CAST(CONCAT(LEFT(DATE_DAY, 4), SUBSTR(DATE_DAY, 6, 2)) AS INTEGER) As month_key,\n*\nFROM AUTOCHECK.RAW.dates", "relation_name": "AUTOCHECK.RAW.dim_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:56.485018Z", "completed_at": "2024-08-24T21:16:56.523583Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:56.537778Z", "completed_at": "2024-08-24T21:16:56.537778Z"}], "thread_id": "Thread-1", "execution_time": 0.07633209228515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.not_null_dim_date_date_key.881d0a31b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom AUTOCHECK.RAW.dim_date\nwhere date_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:56.490911Z", "completed_at": "2024-08-24T21:16:56.528372Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:56.541538Z", "completed_at": "2024-08-24T21:16:56.541538Z"}], "thread_id": "Thread-2", "execution_time": 0.07517528533935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.unique_dim_date_date_key.0869fd48f9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_key as unique_field,\n    count(*) as n_records\n\nfrom AUTOCHECK.RAW.dim_date\nwhere date_key is not null\ngroup by date_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-24T21:16:56.566683Z", "completed_at": "2024-08-24T21:16:56.584883Z"}, {"name": "execute", "started_at": "2024-08-24T21:16:56.593463Z", "completed_at": "2024-08-24T21:16:56.593463Z"}], "thread_id": "Thread-1", "execution_time": 0.03719830513000488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_autocheck.relationships_fct_repayments_date_key__date_key__ref_dim_date_.6dcf809b9c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_key as from_field\n    from AUTOCHECK.RAW.fct_repayments\n    where date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from AUTOCHECK.RAW.dim_date\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}], "elapsed_time": 8.41574215888977, "args": {"log_level_file": "debug", "partial_parse_file_diff": true, "introspect": true, "partial_parse": true, "log_format": "default", "show_resource_report": false, "which": "generate", "strict_mode": false, "vars": {}, "version_check": true, "log_format_file": "debug", "print": true, "static": false, "printer_width": 80, "quiet": false, "select": [], "send_anonymous_usage_stats": true, "use_colors": true, "enable_legacy_logger": false, "indirect_selection": "eager", "invocation_command": "dbt docs generate --profiles-dir ./dbt_autocheck --project-dir ./dbt_autocheck", "log_file_max_bytes": 10485760, "macro_debugging": false, "static_parser": true, "log_level": "info", "exclude": [], "write_json": true, "use_colors_file": true, "compile": true, "log_path": "dbt_autocheck\\logs", "empty_catalog": false, "defer": false, "profiles_dir": "./dbt_autocheck", "cache_selected_only": false, "favor_state": false, "project_dir": "./dbt_autocheck", "warn_error_options": {"include": [], "exclude": []}, "populate_cache": true}}